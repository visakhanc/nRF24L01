
nRF24L01P_Rx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000040c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000040c  000004a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800066  00800066  000004a6  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000004a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000d8  00000000  00000000  00000506  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a13  00000000  00000000  000005de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004a3  00000000  00000000  00000ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000077b  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00001c10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000417  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005bf  00000000  00000000  00002137  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000026f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	7c c0       	rjmp	.+248    	; 0xfe <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e0       	ldi	r30, 0x0C	; 12
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a6 36       	cpi	r26, 0x66	; 102
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a6 e6       	ldi	r26, 0x66	; 102
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a9 37       	cpi	r26, 0x79	; 121
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	d6 c1       	rjmp	.+940    	; 0x408 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:

static uint8_t rx_buf[CONFIG_NRF_STATIC_PL_LENGTH];
static uint8_t addr[CONFIG_NRF_ADDR_LEN] = CONFIG_NRF_ADDRESS;

int main(void) 
{
  5e:	cf 92       	push	r12
  60:	df 92       	push	r13
  62:	ef 92       	push	r14
  64:	ff 92       	push	r15
  66:	1f 93       	push	r17
  68:	df 93       	push	r29
  6a:	cf 93       	push	r28
  6c:	0f 92       	push	r0
  6e:	cd b7       	in	r28, 0x3d	; 61
  70:	de b7       	in	r29, 0x3e	; 62
	uint8_t length, old = 0;
	
	RED_LED_OUT();
  72:	b8 9a       	sbi	0x17, 0	; 23
	RED_LED_OFF();
  74:	c0 98       	cbi	0x18, 0	; 24
	nrf_init(NRF_MODE_PRX, addr);
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	60 e6       	ldi	r22, 0x60	; 96
  7a:	70 e0       	ldi	r23, 0x00	; 0
  7c:	41 d1       	rcall	.+642    	; 0x300 <nrf_init>
	sei();
  7e:	78 94       	sei
  80:	88 ee       	ldi	r24, 0xE8	; 232
  82:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  84:	28 ec       	ldi	r18, 0xC8	; 200
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	f9 01       	movw	r30, r18
  8a:	31 97       	sbiw	r30, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <main+0x2c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  8e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  90:	d9 f7       	brne	.-10     	; 0x88 <main+0x2a>
  92:	10 e0       	ldi	r17, 0x00	; 0
	
	_delay_ms(100);
	while(1) {
		nrf_receive_packet(rx_buf, &length);
  94:	6e 01       	movw	r12, r28
  96:	08 94       	sec
  98:	c1 1c       	adc	r12, r1
  9a:	d1 1c       	adc	r13, r1
  9c:	88 ec       	ldi	r24, 0xC8	; 200
  9e:	e8 2e       	mov	r14, r24
  a0:	f1 2c       	mov	r15, r1
  a2:	86 e6       	ldi	r24, 0x66	; 102
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	b6 01       	movw	r22, r12
  a8:	7c d0       	rcall	.+248    	; 0x1a2 <nrf_receive_packet>
		if(length > 0) {
  aa:	89 81       	ldd	r24, Y+1	; 0x01
  ac:	88 23       	and	r24, r24
  ae:	c9 f3       	breq	.-14     	; 0xa2 <main+0x44>
			if((old + 1) == rx_buf[0]) {
  b0:	81 2f       	mov	r24, r17
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	10 91 66 00 	lds	r17, 0x0066
  ba:	21 2f       	mov	r18, r17
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	82 17       	cp	r24, r18
  c0:	93 07       	cpc	r25, r19
  c2:	79 f7       	brne	.-34     	; 0xa2 <main+0x44>
				RED_LED_ON();
  c4:	c0 9a       	sbi	0x18, 0	; 24
  c6:	84 ef       	ldi	r24, 0xF4	; 244
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	f7 01       	movw	r30, r14
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d2:	d9 f7       	brne	.-10     	; 0xca <main+0x6c>
				_delay_ms(50);
				RED_LED_OFF();
  d4:	c0 98       	cbi	0x18, 0	; 24
  d6:	e5 cf       	rjmp	.-54     	; 0xa2 <main+0x44>

000000d8 <nrf_write_reg>:
	return reg;
}

/* Writes to a register */
static uint8_t nrf_write_reg(uint8_t reg, uint8_t val)
{
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	06 2f       	mov	r16, r22
	uint8_t status;
	
	CSN_LOW();
  de:	c2 98       	cbi	0x18, 2	; 24
	if(reg < WRITE_REG) {  /* write register with data */
  e0:	80 32       	cpi	r24, 0x20	; 32
  e2:	30 f4       	brcc	.+12     	; 0xf0 <nrf_write_reg+0x18>
		status = SPI_TxRx(WRITE_REG|reg);  
  e4:	80 62       	ori	r24, 0x20	; 32
  e6:	70 d1       	rcall	.+736    	; 0x3c8 <SPI_TxRx>
  e8:	18 2f       	mov	r17, r24
		SPI_TxRx(val);
  ea:	80 2f       	mov	r24, r16
  ec:	6d d1       	rcall	.+730    	; 0x3c8 <SPI_TxRx>
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <nrf_write_reg+0x1c>
	}
	else { /* command with no data */
		status = SPI_TxRx(reg);
  f0:	6b d1       	rcall	.+726    	; 0x3c8 <SPI_TxRx>
  f2:	18 2f       	mov	r17, r24
	}
	CSN_HIGH();
  f4:	c2 9a       	sbi	0x18, 2	; 24
	
	return status;
}
  f6:	81 2f       	mov	r24, r17
  f8:	1f 91       	pop	r17
  fa:	0f 91       	pop	r16
  fc:	08 95       	ret

000000fe <__vector_2>:
}


/* ISR for  IRQ */
ISR(INT1_vect)
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	2f 93       	push	r18
 10a:	3f 93       	push	r19
 10c:	4f 93       	push	r20
 10e:	5f 93       	push	r21
 110:	6f 93       	push	r22
 112:	7f 93       	push	r23
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	af 93       	push	r26
 11a:	bf 93       	push	r27
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
	uint8_t status;
	
	status = nrf_write_reg(STATUS, (STAT_MAX_RT|STAT_TX_DS|STAT_RX_DR)); /* Get and clear interrupt flags */
 120:	87 e0       	ldi	r24, 0x07	; 7
 122:	60 e7       	ldi	r22, 0x70	; 112
 124:	d9 df       	rcall	.-78     	; 0xd8 <nrf_write_reg>
	if(status & STAT_RX_DR)
 126:	28 2f       	mov	r18, r24
 128:	86 ff       	sbrs	r24, 6
 12a:	03 c0       	rjmp	.+6      	; 0x132 <__vector_2+0x34>
	{
		/* received data */
		rx_ready = true;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	80 93 77 00 	sts	0x0077, r24
	}
	
	if(status & STAT_TX_DS)
 132:	25 ff       	sbrs	r18, 5
 134:	03 c0       	rjmp	.+6      	; 0x13c <__vector_2+0x3e>
	{
		/* transmit done */
		tx_done = true;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 76 00 	sts	0x0076, r24
	}
	
	if(status & STAT_MAX_RT)
 13c:	24 ff       	sbrs	r18, 4
 13e:	03 c0       	rjmp	.+6      	; 0x146 <__vector_2+0x48>
	{
		/* Maxtimum reties exceeded */
		max_retries = true;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 93 78 00 	sts	0x0078, r24
	}
}
 146:	ff 91       	pop	r31
 148:	ef 91       	pop	r30
 14a:	bf 91       	pop	r27
 14c:	af 91       	pop	r26
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	7f 91       	pop	r23
 154:	6f 91       	pop	r22
 156:	5f 91       	pop	r21
 158:	4f 91       	pop	r20
 15a:	3f 91       	pop	r19
 15c:	2f 91       	pop	r18
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <nrf_set_ack_payload>:
/* 
 * 	Write ACK payload for a pipe
 *		
 */
void nrf_set_ack_payload(uint8_t pipe, uint8_t *buf, uint8_t length)
{
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	eb 01       	movw	r28, r22
 170:	14 2f       	mov	r17, r20
	CSN_LOW();
 172:	c2 98       	cbi	0x18, 2	; 24
	SPI_TxRx(WR_ACK_PLOAD|pipe);
 174:	88 6a       	ori	r24, 0xA8	; 168
 176:	28 d1       	rcall	.+592    	; 0x3c8 <SPI_TxRx>
 178:	03 c0       	rjmp	.+6      	; 0x180 <nrf_set_ack_payload+0x18>
	while(length--) {
		SPI_TxRx(*buf++);
 17a:	89 91       	ld	r24, Y+
 17c:	25 d1       	rcall	.+586    	; 0x3c8 <SPI_TxRx>
 17e:	11 50       	subi	r17, 0x01	; 1
 */
void nrf_set_ack_payload(uint8_t pipe, uint8_t *buf, uint8_t length)
{
	CSN_LOW();
	SPI_TxRx(WR_ACK_PLOAD|pipe);
	while(length--) {
 180:	11 23       	and	r17, r17
 182:	d9 f7       	brne	.-10     	; 0x17a <nrf_set_ack_payload+0x12>
		SPI_TxRx(*buf++);
	}
	CSN_HIGH();
 184:	c2 9a       	sbi	0x18, 2	; 24
}
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	1f 91       	pop	r17
 18c:	08 95       	ret

0000018e <nrf_read_reg>:
	GICR |= (1 << INT1);
}

/* Reads from a register */
static uint8_t nrf_read_reg(uint8_t reg)
{
 18e:	1f 93       	push	r17
 190:	18 2f       	mov	r17, r24
	uint8_t value;
	
	CSN_LOW(); 
 192:	c2 98       	cbi	0x18, 2	; 24
	SPI_TxRx(reg);	/* Transmit register to read */
 194:	19 d1       	rcall	.+562    	; 0x3c8 <SPI_TxRx>
	value = SPI_TxRx(0);  /* Then get the register value */
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	17 d1       	rcall	.+558    	; 0x3c8 <SPI_TxRx>
	CSN_HIGH();
 19a:	c2 9a       	sbi	0x18, 2	; 24
	
	return reg;
}
 19c:	81 2f       	mov	r24, r17
 19e:	1f 91       	pop	r17
 1a0:	08 95       	ret

000001a2 <nrf_receive_packet>:
 *	Returns: 16 bit
 *		MSB byte: pipe number
 *		LSB byte: length of received packet
 */
uint8_t nrf_receive_packet(uint8_t *buf, uint8_t *length)
{
 1a2:	9f 92       	push	r9
 1a4:	af 92       	push	r10
 1a6:	bf 92       	push	r11
 1a8:	cf 92       	push	r12
 1aa:	df 92       	push	r13
 1ac:	ef 92       	push	r14
 1ae:	ff 92       	push	r15
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	98 2e       	mov	r9, r24
 1ba:	c9 2e       	mov	r12, r25
 1bc:	5b 01       	movw	r10, r22
	uint8_t rx_pipe = 0;
	uint16_t ret;
	
	*length = 0;
 1be:	fb 01       	movw	r30, r22
 1c0:	10 82       	st	Z, r1
	if(rx_ready == true) {
 1c2:	80 91 77 00 	lds	r24, 0x0077
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	11 f0       	breq	.+4      	; 0x1ce <nrf_receive_packet+0x2c>
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	2e c0       	rjmp	.+92     	; 0x22a <nrf_receive_packet+0x88>
		rx_ready = false;
 1ce:	10 92 77 00 	sts	0x0077, r1
	return status;
}

static inline uint8_t nrf_nop(void)
{
	return nrf_write_reg(NOP, 0);
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	80 df       	rcall	.-256    	; 0xd8 <nrf_write_reg>
}

static inline uint8_t nrf_get_rx_pipe(void)
{
	return ((nrf_nop() >> 1) & 0x7);
 1d8:	e8 2e       	mov	r14, r24
 1da:	e6 94       	lsr	r14
 1dc:	f7 e0       	ldi	r31, 0x07	; 7
 1de:	ef 22       	and	r14, r31
			CSN_LOW();
			SPI_TxRx(RX_ADDR_P0 + reg);
			break;
      
		case NRF_RX_PLOAD:  /* Read Rx payload */
			if( (reg = nrf_get_rx_pipe()) < 7) {
 1e0:	ef 16       	cp	r14, r31
 1e2:	19 f4       	brne	.+6      	; 0x1ea <nrf_receive_packet+0x48>
 1e4:	dd 24       	eor	r13, r13
 1e6:	ff 24       	eor	r15, r15
 1e8:	07 c0       	rjmp	.+14     	; 0x1f8 <nrf_receive_packet+0x56>
				length = ctr = nrf_read_reg(RD_RX_PLOAD_W);
 1ea:	80 e6       	ldi	r24, 0x60	; 96
 1ec:	d0 df       	rcall	.-96     	; 0x18e <nrf_read_reg>
 1ee:	f8 2e       	mov	r15, r24
				CSN_LOW();
 1f0:	c2 98       	cbi	0x18, 2	; 24
				SPI_TxRx(RD_RX_PLOAD);
 1f2:	81 e6       	ldi	r24, 0x61	; 97
 1f4:	e9 d0       	rcall	.+466    	; 0x3c8 <SPI_TxRx>
 1f6:	df 2c       	mov	r13, r15
 1f8:	89 2d       	mov	r24, r9
 1fa:	9c 2d       	mov	r25, r12
 1fc:	9c 01       	movw	r18, r24
 1fe:	e9 01       	movw	r28, r18
 200:	04 c0       	rjmp	.+8      	; 0x20a <nrf_receive_packet+0x68>
		default:
			break;
	}

	while(ctr--) {
		*buf++ = SPI_TxRx(0);
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	e1 d0       	rcall	.+450    	; 0x3c8 <SPI_TxRx>
 206:	89 93       	st	Y+, r24
 208:	fa 94       	dec	r15

		default:
			break;
	}

	while(ctr--) {
 20a:	ff 20       	and	r15, r15
 20c:	d1 f7       	brne	.-12     	; 0x202 <nrf_receive_packet+0x60>
		*buf++ = SPI_TxRx(0);
	}

	CSN_HIGH();
 20e:	c2 9a       	sbi	0x18, 2	; 24

	return (((uint16_t) reg << 8) | length);
 210:	cd 2d       	mov	r28, r13
 212:	d0 e0       	ldi	r29, 0x00	; 0
 214:	1e 2d       	mov	r17, r14
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	c0 2b       	or	r28, r16
 21a:	d1 2b       	or	r29, r17
	*length = 0;
	if(rx_ready == true) {
		rx_ready = false;
		do {
			ret = nrf_read_multibyte_reg(NRF_RX_PLOAD, buf);
		} while (!(nrf_read_reg(FIFO_STATUS) & RX_EMPTY));
 21c:	87 e1       	ldi	r24, 0x17	; 23
 21e:	b7 df       	rcall	.-146    	; 0x18e <nrf_read_reg>
 220:	80 ff       	sbrs	r24, 0
 222:	d7 cf       	rjmp	.-82     	; 0x1d2 <nrf_receive_packet+0x30>
		*length = (uint8_t)ret;
 224:	f5 01       	movw	r30, r10
 226:	c0 83       	st	Z, r28
		rx_pipe = (uint8_t)(ret >> 8);
 228:	8d 2f       	mov	r24, r29
	}
	return rx_pipe;
}
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	1f 91       	pop	r17
 230:	0f 91       	pop	r16
 232:	ff 90       	pop	r15
 234:	ef 90       	pop	r14
 236:	df 90       	pop	r13
 238:	cf 90       	pop	r12
 23a:	bf 90       	pop	r11
 23c:	af 90       	pop	r10
 23e:	9f 90       	pop	r9
 240:	08 95       	ret

00000242 <nrf_write_multibyte_reg>:

/* Writes to Multibyte register 
 * 
 */
static void nrf_write_multibyte_reg(uint8_t reg, const uint8_t *buf, uint8_t length)
{
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	18 2f       	mov	r17, r24
 24c:	eb 01       	movw	r28, r22
 24e:	04 2f       	mov	r16, r20
	switch(reg)
 250:	86 30       	cpi	r24, 0x06	; 6
 252:	41 f0       	breq	.+16     	; 0x264 <nrf_write_multibyte_reg+0x22>
 254:	87 30       	cpi	r24, 0x07	; 7
 256:	18 f4       	brcc	.+6      	; 0x25e <nrf_write_multibyte_reg+0x1c>
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	98 f4       	brcc	.+38     	; 0x282 <nrf_write_multibyte_reg+0x40>
 25c:	03 c0       	rjmp	.+6      	; 0x264 <nrf_write_multibyte_reg+0x22>
 25e:	87 30       	cpi	r24, 0x07	; 7
 260:	81 f4       	brne	.+32     	; 0x282 <nrf_write_multibyte_reg+0x40>
 262:	08 c0       	rjmp	.+16     	; 0x274 <nrf_write_multibyte_reg+0x32>
	return ((nrf_nop() >> 1) & 0x7);
}

static inline uint8_t nrf_get_address_width(void)
{
	return (nrf_read_reg(SETUP_AW) + 2);
 264:	83 e0       	ldi	r24, 0x03	; 3
 266:	93 df       	rcall	.-218    	; 0x18e <nrf_read_reg>
 268:	08 2f       	mov	r16, r24
 26a:	0e 5f       	subi	r16, 0xFE	; 254
	{
		case NRF_PIPE0:
		case NRF_PIPE1:
		case NRF_TX_PIPE:  /* Write pipe address */
			length = nrf_get_address_width();
			CSN_LOW();
 26c:	c2 98       	cbi	0x18, 2	; 24
			SPI_TxRx(WRITE_REG + RX_ADDR_P0 + reg);
 26e:	81 2f       	mov	r24, r17
 270:	86 5d       	subi	r24, 0xD6	; 214
 272:	02 c0       	rjmp	.+4      	; 0x278 <nrf_write_multibyte_reg+0x36>
			break;
		case NRF_TX_PLOAD:  /* Write Tx payload */
			CSN_LOW();
 274:	c2 98       	cbi	0x18, 2	; 24
			SPI_TxRx(WR_TX_PLOAD);
 276:	80 ea       	ldi	r24, 0xA0	; 160
 278:	a7 d0       	rcall	.+334    	; 0x3c8 <SPI_TxRx>
 27a:	03 c0       	rjmp	.+6      	; 0x282 <nrf_write_multibyte_reg+0x40>
		default:
			break;
	}

	while(length--) {
		SPI_TxRx(*buf++);
 27c:	89 91       	ld	r24, Y+
 27e:	a4 d0       	rcall	.+328    	; 0x3c8 <SPI_TxRx>
 280:	01 50       	subi	r16, 0x01	; 1
			break;
		default:
			break;
	}

	while(length--) {
 282:	00 23       	and	r16, r16
 284:	d9 f7       	brne	.-10     	; 0x27c <nrf_write_multibyte_reg+0x3a>
		SPI_TxRx(*buf++);
	}

	CSN_HIGH();
 286:	c2 9a       	sbi	0x18, 2	; 24
}
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	08 95       	ret

00000292 <nrf_transmit_packet>:
 *		0 - If successfully transmitted
 *		1 - Not successful (ACK not received)
 *		2 - Cannot transmit (Tx FIFO full)
 */
uint8_t nrf_transmit_packet(uint8_t *packet, uint8_t length)
{
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	ec 01       	movw	r28, r24
 29a:	16 2f       	mov	r17, r22
	uint8_t 	ret;
	
	if(nrf_read_reg(FIFO_STATUS) & TX_FIFO_FULL) {
 29c:	87 e1       	ldi	r24, 0x17	; 23
 29e:	77 df       	rcall	.-274    	; 0x18e <nrf_read_reg>
 2a0:	85 ff       	sbrs	r24, 5
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <nrf_transmit_packet+0x16>
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	18 c0       	rjmp	.+48     	; 0x2d8 <nrf_transmit_packet+0x46>
		return 2;
	}
	
	nrf_write_multibyte_reg(NRF_TX_PLOAD, packet, length);
 2a8:	87 e0       	ldi	r24, 0x07	; 7
 2aa:	be 01       	movw	r22, r28
 2ac:	41 2f       	mov	r20, r17
 2ae:	c9 df       	rcall	.-110    	; 0x242 <nrf_write_multibyte_reg>
	CE_PULSE();
 2b0:	c1 9a       	sbi	0x18, 1	; 24
 2b2:	88 ec       	ldi	r24, 0xC8	; 200
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <nrf_transmit_packet+0x24>
 2ba:	c1 98       	cbi	0x18, 1	; 24
	do {
		if(tx_done == true) {
 2bc:	80 91 76 00 	lds	r24, 0x0076
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	21 f4       	brne	.+8      	; 0x2cc <nrf_transmit_packet+0x3a>
			tx_done = false;
 2c4:	10 92 76 00 	sts	0x0076, r1
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	06 c0       	rjmp	.+12     	; 0x2d8 <nrf_transmit_packet+0x46>
			ret = 0;
			break;
		}
		if(max_retries == true) {
 2cc:	80 91 78 00 	lds	r24, 0x0078
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	a1 f7       	brne	.-24     	; 0x2bc <nrf_transmit_packet+0x2a>
			max_retries = false;
 2d4:	10 92 78 00 	sts	0x0078, r1
			break;
		}
	} while (1);
	
	return ret;
}
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	08 95       	ret

000002e0 <nrf_set_address>:
/* Set address of Pipes 
 * Tx address, Rx Pipe0,Pipe1 address are 5 bytes long
 * Rx pipe2-5 are given 1 byte address
 */
static void nrf_set_address(nrf_pipe_t pipe, const uint8_t *addr)
{
 2e0:	fb 01       	movw	r30, r22
  switch(pipe)
 2e2:	86 30       	cpi	r24, 0x06	; 6
 2e4:	18 f4       	brcc	.+6      	; 0x2ec <nrf_set_address+0xc>
 2e6:	82 30       	cpi	r24, 0x02	; 2
 2e8:	38 f4       	brcc	.+14     	; 0x2f8 <nrf_set_address+0x18>
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <nrf_set_address+0x10>
 2ec:	86 30       	cpi	r24, 0x06	; 6
 2ee:	39 f4       	brne	.+14     	; 0x2fe <nrf_set_address+0x1e>
  {
    case NRF_TX_PIPE:
    case NRF_PIPE0:
    case NRF_PIPE1:
      nrf_write_multibyte_reg((uint8_t) pipe, addr, 0);
 2f0:	bf 01       	movw	r22, r30
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	a6 df       	rcall	.-180    	; 0x242 <nrf_write_multibyte_reg>
 2f6:	08 95       	ret

    case NRF_PIPE2:
    case NRF_PIPE3:
    case NRF_PIPE4:
    case NRF_PIPE5:
      nrf_write_reg(RX_ADDR_P0 + (uint8_t) pipe, *addr);
 2f8:	86 5f       	subi	r24, 0xF6	; 246
 2fa:	60 81       	ld	r22, Z
 2fc:	ed de       	rcall	.-550    	; 0xd8 <nrf_write_reg>
 2fe:	08 95       	ret

00000300 <nrf_init>:
 *		Enable pipes (with/without auto ack)
 * 		Set data rate, power, payload length and other things
 *		Set mode to Tx/Rx
 */
void nrf_init(nrf_opmode_t mode, const uint8_t *address)
{
 300:	ff 92       	push	r15
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	f8 2e       	mov	r15, r24
 308:	8b 01       	movw	r16, r22
static volatile uint8_t max_retries;


static void mcu_init(void)
{
	CE_OUT();
 30a:	b9 9a       	sbi	0x17, 1	; 23
	SPI_Init(SPI_MODE0, SPI_CLKDIV_4);
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	48 d0       	rcall	.+144    	; 0x3a2 <SPI_Init>
	
	/* configure INT1 as LOW-level triggered */
	MCUCR &= ~(1 << ISC11);
 312:	85 b7       	in	r24, 0x35	; 53
 314:	87 7f       	andi	r24, 0xF7	; 247
 316:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC10);
 318:	85 b7       	in	r24, 0x35	; 53
 31a:	8b 7f       	andi	r24, 0xFB	; 251
 31c:	85 bf       	out	0x35, r24	; 53
	
	/* Enable INT1 interrupt for  IRQ */
	GICR |= (1 << INT1);
 31e:	8b b7       	in	r24, 0x3b	; 59
 320:	80 68       	ori	r24, 0x80	; 128
 322:	8b bf       	out	0x3b, r24	; 59
	
	/* low level initialization */
	mcu_init();
	
	/* Set Address */
	nrf_write_reg(SETUP_AW, (uint8_t)(CONFIG_NRF_ADDR_LEN-2));  /* Address width */
 324:	83 e0       	ldi	r24, 0x03	; 3
 326:	63 e0       	ldi	r22, 0x03	; 3
 328:	d7 de       	rcall	.-594    	; 0xd8 <nrf_write_reg>
	nrf_set_address(NRF_TX_PIPE, address);  /* Set same address for Tx and Pipe0, for auto ack */
 32a:	86 e0       	ldi	r24, 0x06	; 6
 32c:	b8 01       	movw	r22, r16
 32e:	d8 df       	rcall	.-80     	; 0x2e0 <nrf_set_address>
	nrf_set_address(NRF_PIPE0, address);
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	b8 01       	movw	r22, r16
 334:	d5 df       	rcall	.-86     	; 0x2e0 <nrf_set_address>
	
	/* Open channels */
	reg_val = (1 << 0); /* open only Pipe0 */
	nrf_write_reg(EN_RXADDR, reg_val);
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	ce de       	rcall	.-612    	; 0xd8 <nrf_write_reg>
	if(CONFIG_NRF_AUTOACK_ENABLED) {
		reg_val = (1 << 0);  /* Enable auto ack (only for Pipe 0) */
		nrf_write_reg(EN_AA, reg_val);
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	61 e0       	ldi	r22, 0x01	; 1
 340:	cb de       	rcall	.-618    	; 0xd8 <nrf_write_reg>
	}
	
	/* Set payload length (only for Pipe 0)*/
	if(mode == NRF_MODE_PRX) {
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	f8 16       	cp	r15, r24
 346:	19 f4       	brne	.+6      	; 0x34e <nrf_init+0x4e>
		nrf_write_reg(RX_PW_P0, CONFIG_NRF_STATIC_PL_LENGTH);
 348:	81 e1       	ldi	r24, 0x11	; 17
 34a:	60 e1       	ldi	r22, 0x10	; 16
 34c:	c5 de       	rcall	.-630    	; 0xd8 <nrf_write_reg>
		reg_val |= (1 << 1);
	}
	if(!CONFIG_NRF_AUTOACK_ENABLED) {
		reg_val |= (1 << 0);
	}
	nrf_write_reg(LOCK_UNLOCK,0);  
 34e:	80 e5       	ldi	r24, 0x50	; 80
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	c2 de       	rcall	.-636    	; 0xd8 <nrf_write_reg>
	nrf_write_reg(0x73,0);			/* Unlock FEATURE register */
 354:	83 e7       	ldi	r24, 0x73	; 115
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	bf de       	rcall	.-642    	; 0xd8 <nrf_write_reg>
	nrf_write_reg(FEATURE, reg_val);
 35a:	8d e1       	ldi	r24, 0x1D	; 29
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	bc de       	rcall	.-648    	; 0xd8 <nrf_write_reg>
	/* Retransmit reg */
	reg_val = 0;
	if(CONFIG_NRF_AUTOACK_ENABLED) {
		reg_val = (((CONFIG_NRF_RETRANS_DELAY/250)-1) << 4)|(CONFIG_NRF_TX_RETRANSMITS & 0xF);
	}
	nrf_write_reg(SETUP_RETR, reg_val);
 360:	84 e0       	ldi	r24, 0x04	; 4
 362:	6f e1       	ldi	r22, 0x1F	; 31
 364:	b9 de       	rcall	.-654    	; 0xd8 <nrf_write_reg>
	
	/* RF setup reg */
	reg_val = nrf_read_reg(RF_SETUP);
 366:	86 e0       	ldi	r24, 0x06	; 6
 368:	12 df       	rcall	.-476    	; 0x18e <nrf_read_reg>
	reg_val &= ~(RF_DR_LOW|RF_DR_HIGH|RF_PWR1|RF_PWR0);
 36a:	68 2f       	mov	r22, r24
 36c:	61 7d       	andi	r22, 0xD1	; 209
		reg_val |= RF_DR_HIGH;
	} else if(CONFIG_NRF_DATA_RATE == NRF_RATE_2MBPS) {  
		reg_val |=  RF_DR_LOW;
	}
	reg_val |= (CONFIG_NRF_TX_PWR << 1);
	nrf_write_reg(RF_SETUP, reg_val);
 36e:	6e 60       	ori	r22, 0x0E	; 14
 370:	86 e0       	ldi	r24, 0x06	; 6
 372:	b2 de       	rcall	.-668    	; 0xd8 <nrf_write_reg>


	/* RF Channel reg*/
	nrf_write_reg(RF_CH, CONFIG_NRF_RF_CHANNEL);
 374:	85 e0       	ldi	r24, 0x05	; 5
 376:	68 e2       	ldi	r22, 0x28	; 40
 378:	af de       	rcall	.-674    	; 0xd8 <nrf_write_reg>
	
	/* Config reg */
	reg_val = (CONFIG_EN_CRC|CONFIG_CRCO|CONFIG_PWR_UP);
	if(mode == NRF_MODE_PRX) {
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	f8 16       	cp	r15, r24
 37e:	11 f4       	brne	.+4      	; 0x384 <nrf_init+0x84>
 380:	6f e0       	ldi	r22, 0x0F	; 15
 382:	01 c0       	rjmp	.+2      	; 0x386 <nrf_init+0x86>
 384:	6e e0       	ldi	r22, 0x0E	; 14
		reg_val |= 1;
	}
	nrf_write_reg(CONFIG, reg_val);
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	a7 de       	rcall	.-690    	; 0xd8 <nrf_write_reg>
	
	/* Set CE High for Rx mode */
	if(mode == NRF_MODE_PRX) {
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	f8 16       	cp	r15, r24
 38e:	09 f4       	brne	.+2      	; 0x392 <nrf_init+0x92>
		CE_HIGH();
 390:	c1 9a       	sbi	0x18, 1	; 24
 392:	80 e1       	ldi	r24, 0x10	; 16
 394:	97 e2       	ldi	r25, 0x27	; 39
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <nrf_init+0x96>
	}
	
	_delay_ms(5);
}
 39a:	1f 91       	pop	r17
 39c:	0f 91       	pop	r16
 39e:	ff 90       	pop	r15
 3a0:	08 95       	ret

000003a2 <SPI_Init>:

/* Initialize the SPI interface in Master mode with given SPI mode and clock rate division */
void SPI_Init(SPI_MODE_t mode, SPI_CLKDIV_t clk_div)
{
	/* Set MOSI, SCK as ouput */
	DDRB |= (1 << 3)|(1 << 5);
 3a2:	97 b3       	in	r25, 0x17	; 23
 3a4:	98 62       	ori	r25, 0x28	; 40
 3a6:	97 bb       	out	0x17, r25	; 23
	
	/* Slave Select pin is output, initially HIGH */
	SS_DDR |= (1 << SS_PIN);
 3a8:	ba 9a       	sbi	0x17, 2	; 23
	SS_HIGH();
 3aa:	c2 9a       	sbi	0x18, 2	; 24
	
	/* Initialize SPI */
	SPCR = (1 << 6)|(1 << 4)|(mode << 2);  /* Enable SPI, master mode, MSB first, given mode */
 3ac:	88 0f       	add	r24, r24
 3ae:	88 0f       	add	r24, r24
 3b0:	80 65       	ori	r24, 0x50	; 80
 3b2:	8d b9       	out	0x0d, r24	; 13
	SPCR |= (clk_div & 0x3); /* Clock rate division */
 3b4:	9d b1       	in	r25, 0x0d	; 13
 3b6:	86 2f       	mov	r24, r22
 3b8:	83 70       	andi	r24, 0x03	; 3
 3ba:	89 2b       	or	r24, r25
 3bc:	8d b9       	out	0x0d, r24	; 13
	if(clk_div & (1 << 2))
 3be:	62 ff       	sbrs	r22, 2
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <SPI_Init+0x24>
	{
		SPSR = 0x1;  /* SPI2X bit */
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	8e b9       	out	0x0e, r24	; 14
 3c6:	08 95       	ret

000003c8 <SPI_TxRx>:


uint8_t SPI_TxRx(uint8_t data)
{
	/* Start transmission */
	SPDR = data;
 3c8:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission complete */
	while(!(SPSR & (1 << SPIF)) )
 3ca:	77 9b       	sbis	0x0e, 7	; 14
 3cc:	fe cf       	rjmp	.-4      	; 0x3ca <SPI_TxRx+0x2>
		;
	
	return SPDR;
 3ce:	8f b1       	in	r24, 0x0f	; 15
}
 3d0:	08 95       	ret

000003d2 <SPI_TxBuf>:


void SPI_TxBuf(uint8_t *buf, uint16_t length)
{
 3d2:	fc 01       	movw	r30, r24
 3d4:	08 c0       	rjmp	.+16     	; 0x3e6 <SPI_TxBuf+0x14>
	while(length--)
	{
		SPI_TxRx(*buf++);
 3d6:	80 81       	ld	r24, Z


uint8_t SPI_TxRx(uint8_t data)
{
	/* Start transmission */
	SPDR = data;
 3d8:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission complete */
	while(!(SPSR & (1 << SPIF)) )
 3da:	77 9b       	sbis	0x0e, 7	; 14
 3dc:	fe cf       	rjmp	.-4      	; 0x3da <SPI_TxBuf+0x8>

void SPI_TxBuf(uint8_t *buf, uint16_t length)
{
	while(length--)
	{
		SPI_TxRx(*buf++);
 3de:	31 96       	adiw	r30, 0x01	; 1
	
	/* Wait for transmission complete */
	while(!(SPSR & (1 << SPIF)) )
		;
	
	return SPDR;
 3e0:	8f b1       	in	r24, 0x0f	; 15
 3e2:	61 50       	subi	r22, 0x01	; 1
 3e4:	70 40       	sbci	r23, 0x00	; 0
}


void SPI_TxBuf(uint8_t *buf, uint16_t length)
{
	while(length--)
 3e6:	61 15       	cp	r22, r1
 3e8:	71 05       	cpc	r23, r1
 3ea:	a9 f7       	brne	.-22     	; 0x3d6 <SPI_TxBuf+0x4>
	{
		SPI_TxRx(*buf++);
	}
}
 3ec:	08 95       	ret

000003ee <SPI_RxBuf>:

void SPI_RxBuf(uint8_t *buf, uint16_t length)
{
 3ee:	fc 01       	movw	r30, r24
 3f0:	07 c0       	rjmp	.+14     	; 0x400 <SPI_RxBuf+0x12>


uint8_t SPI_TxRx(uint8_t data)
{
	/* Start transmission */
	SPDR = data;
 3f2:	1f b8       	out	0x0f, r1	; 15
	
	/* Wait for transmission complete */
	while(!(SPSR & (1 << SPIF)) )
 3f4:	77 9b       	sbis	0x0e, 7	; 14
 3f6:	fe cf       	rjmp	.-4      	; 0x3f4 <SPI_RxBuf+0x6>
		;
	
	return SPDR;
 3f8:	8f b1       	in	r24, 0x0f	; 15

void SPI_RxBuf(uint8_t *buf, uint16_t length)
{
	while(length--)
	{
		*buf++ = SPI_TxRx(0x00);
 3fa:	81 93       	st	Z+, r24
 3fc:	61 50       	subi	r22, 0x01	; 1
 3fe:	70 40       	sbci	r23, 0x00	; 0
	}
}

void SPI_RxBuf(uint8_t *buf, uint16_t length)
{
	while(length--)
 400:	61 15       	cp	r22, r1
 402:	71 05       	cpc	r23, r1
 404:	b1 f7       	brne	.-20     	; 0x3f2 <SPI_RxBuf+0x4>
	{
		*buf++ = SPI_TxRx(0x00);
	}	
}
 406:	08 95       	ret

00000408 <_exit>:
 408:	f8 94       	cli

0000040a <__stop_program>:
 40a:	ff cf       	rjmp	.-2      	; 0x40a <__stop_program>
